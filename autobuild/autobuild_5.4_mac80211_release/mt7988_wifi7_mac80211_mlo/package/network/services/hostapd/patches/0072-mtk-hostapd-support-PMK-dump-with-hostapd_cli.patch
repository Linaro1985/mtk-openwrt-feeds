From f06bec23bdc1773bb4eaea1566e7f127d212edc9 Mon Sep 17 00:00:00 2001
From: Shayne Chen <shayne.chen@mediatek.com>
Date: Thu, 22 Feb 2024 11:37:35 +0800
Subject: [PATCH 072/137] mtk: hostapd: support PMK dump with hostapd_cli

Note: only for internal developing usage, shall not be released.

SAE PMK can be used to decrypt mgmt/data packets in Wireshark.
For MLD AP, wpa_auth info will only be stored in the setup link hapd, so we need to loop for each link hapd to print out all STAs (can be legacy or MLD) from different setup links.

May not work for multiple MLD APs yet.

root@OpenWrt:~# hostapd_cli -i phy0-ap0 pmksa
Setup at link 0:
Index / SPA / PMKID / PMK / expiration (in seconds) / opportunistic
Setup at link 1:
Index / SPA / PMKID / PMK / expiration (in seconds) / opportunistic
0 02:0c:43:b2:01:1c b5706f5f53117e00fa46fcf94c225009 7505eb11319fa94add14d0fd091caadf9be2c642aa7363a96e1efa575e794420 43180 0
Setup at link 2:
Index / SPA / PMKID / PMK / expiration (in seconds) / opportunistic

Signed-off-by: Shayne Chen <shayne.chen@mediatek.com>
---
 src/ap/ctrl_iface_ap.c    | 22 +++++++++++++++++++++-
 src/ap/pmksa_cache_auth.c |  5 ++++-
 2 files changed, 25 insertions(+), 2 deletions(-)

diff --git a/src/ap/ctrl_iface_ap.c b/src/ap/ctrl_iface_ap.c
index bfcd8b80d..20d426560 100644
--- a/src/ap/ctrl_iface_ap.c
+++ b/src/ap/ctrl_iface_ap.c
@@ -1158,7 +1158,27 @@ int hostapd_ctrl_iface_stop_ap(struct hostapd_data *hapd)
 int hostapd_ctrl_iface_pmksa_list(struct hostapd_data *hapd, char *buf,
 				  size_t len)
 {
-	return wpa_auth_pmksa_list(hapd->wpa_auth, buf, len);
+	char *pos = buf;
+	int ret, link_id;
+
+	if (!hapd->conf->mld_ap)
+		return wpa_auth_pmksa_list(hapd->wpa_auth, buf, len);
+
+	for (link_id = 0; link_id < MAX_NUM_MLD_LINKS; link_id++) {
+		struct hostapd_data *h = hostapd_mld_get_link_bss(hapd, link_id);
+
+		if (!h)
+			continue;
+
+		ret = os_snprintf(pos, len - (pos - buf), "Setup at link %u:\n", h->mld_link_id);
+		if (os_snprintf_error(len - (pos - buf), ret))
+			return pos - buf;
+		pos += ret;
+
+		pos += wpa_auth_pmksa_list(h->wpa_auth, pos, len - (pos - buf));
+	}
+
+	return pos - buf;
 }
 
 
diff --git a/src/ap/pmksa_cache_auth.c b/src/ap/pmksa_cache_auth.c
index 2fce8383d..8a63cb682 100644
--- a/src/ap/pmksa_cache_auth.c
+++ b/src/ap/pmksa_cache_auth.c
@@ -658,7 +658,7 @@ int pmksa_cache_auth_list(struct rsn_pmksa_cache *pmksa, char *buf, size_t len)
 
 	os_get_reltime(&now);
 	ret = os_snprintf(pos, buf + len - pos,
-			  "Index / SPA / PMKID / expiration (in seconds) / opportunistic\n");
+			  "Index / SPA / PMKID / PMK / expiration (in seconds) / opportunistic\n");
 	if (os_snprintf_error(buf + len - pos, ret))
 		return pos - buf;
 	pos += ret;
@@ -672,6 +672,9 @@ int pmksa_cache_auth_list(struct rsn_pmksa_cache *pmksa, char *buf, size_t len)
 		pos += ret;
 		pos += wpa_snprintf_hex(pos, buf + len - pos, entry->pmkid,
 					PMKID_LEN);
+		*pos++ = ' ';
+		pos += wpa_snprintf_hex(pos, buf + len - pos, entry->pmk,
+					entry->pmk_len);
 		ret = os_snprintf(pos, buf + len - pos, " %d %d\n",
 				  (int) (entry->expiration - now.sec),
 				  entry->opportunistic);
-- 
2.18.0


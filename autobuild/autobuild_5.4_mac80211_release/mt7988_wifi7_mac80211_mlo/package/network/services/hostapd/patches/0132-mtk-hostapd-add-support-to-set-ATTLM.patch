From 058ec4e1a07f859d6b7f33d21ee3276fa7b37678 Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Wed, 3 Jul 2024 15:34:45 +0800
Subject: [PATCH 132/137] mtk: hostapd: add support to set ATTLM

This commit adds the support to set ATTLM, from hostapd_cli to driver.
Setting an ATTLM requires 3 parameters
1. disabled_links: disabled link ID bitmap
2. switch_time: how much time it takes to start the A-TTLM (in ms)
3. duration: how long the A-TTLM lasts (in ms)

Below is a hostapd_cli example that requires an A-TTLM starts to disable
link_id=1 after 5 seconds and last for 20 seconds:
$ hostapd_cli -i ap-mld-1 set_attlm disabled_links=2 switch_time=5000
duration=20000

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 hostapd/ctrl_iface.c               | 66 ++++++++++++++++++++++++++++++
 hostapd/hostapd_cli.c              |  8 ++++
 src/ap/ap_drv_ops.c                |  9 ++++
 src/ap/ap_drv_ops.h                |  1 +
 src/ap/hostapd.c                   |  8 ++++
 src/ap/hostapd.h                   |  1 +
 src/ap/ieee802_11.c                |  7 ++++
 src/ap/ieee802_11_eht.c            |  2 +-
 src/drivers/driver.h               |  8 ++++
 src/drivers/driver_nl80211.c       | 33 +++++++++++++++
 src/drivers/driver_nl80211_event.c |  1 +
 src/drivers/nl80211_copy.h         |  2 +
 12 files changed, 145 insertions(+), 1 deletion(-)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 6db9fa617..2cd5487ca 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -4039,6 +4039,68 @@ out:
 	return ret;
 }
 
+static int hostapd_ctrl_iface_set_attlm(struct hostapd_data *hapd, char *cmd,
+					char *buf, size_t buflen)
+{
+#define MAX_SWITCH_TIME_MS 30000
+#define MAX_DURATION_MS 16000000
+	struct attlm_settings *attlm;
+	struct hostapd_data *h;
+	char *token, *context = NULL;
+	u16 switch_time, disabled_links, valid_links = 0;
+	u32 duration;
+	int ret, i;
+
+	if (!hapd->conf->mld_ap || !hapd->mld)
+		return -1;
+
+	attlm = &hapd->mld->new_attlm;
+	if (attlm->valid) {
+		wpa_printf(MSG_ERROR, "Busy: A-TTLM is on-going");
+		return -1;
+	}
+
+	for_each_mld_link(h, hapd)
+		valid_links |= BIT(h->mld_link_id);
+
+	while ((token = str_token(cmd, " ", &context))) {
+		if (os_strncmp(token, "switch_time=", 12) == 0) {
+			switch_time = atoi(token + 12);
+			if (switch_time > 0 && switch_time <= MAX_SWITCH_TIME_MS)
+				continue;
+		}
+
+		if (os_strncmp(token, "disabled_links=", 15) == 0) {
+			disabled_links = atoi(token + 15);
+
+			if ((disabled_links & valid_links) &&
+			    !(disabled_links & ~valid_links))
+				continue;
+		}
+
+		if (os_strncmp(token, "duration=", 9) == 0) {
+			duration = atoi(token + 9);
+			if (duration > 0 && duration <= MAX_DURATION_MS)
+				continue;
+		}
+
+		wpa_printf(MSG_INFO, "CTRL: Invalid SET_ATTLM parameter: %s",
+			   token);
+		return -1;
+	}
+
+	wpa_printf(MSG_DEBUG,
+		   "MLD: set A-TTLM disabled_links=%u, switch_time=%u, duration=%u",
+		   disabled_links, switch_time, duration);
+
+	attlm->valid = true;
+	attlm->direction = IEEE80211_TTLM_DIRECTION_BOTH;
+	attlm->duration = duration;
+	attlm->switch_time = switch_time;
+	attlm->disabled_links = hapd->conf->mld_allowed_links & disabled_links;
+
+	return hostapd_mld_set_attlm(hapd);
+}
 #endif /* CONFIG_TESTING_OPTIONS */
 #endif /* CONFIG_IEEE80211BE */
 
@@ -6166,6 +6228,10 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 		if (hostapd_ctrl_iface_link_add(hapd, buf + 9,
 						reply, reply_size))
 			reply_len = -1;
+	} else if (os_strncmp(buf, "SET_ATTLM ", 10) == 0) {
+		if (hostapd_ctrl_iface_set_attlm(hapd, buf + 10, reply,
+						 reply_size))
+			reply_len = -1;
 #endif /* CONFIG_TESTING_OPTIONS */
 #endif /* CONFIG_IEEE80211BE */
 	} else if (os_strncmp(buf, "SET_EDCCA ", 10) == 0) {
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index 9dcc0d74b..f81211ba4 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1791,6 +1791,12 @@ static int hostapd_cli_cmd_link_remove(struct wpa_ctrl *ctrl, int argc,
 	return hostapd_cli_cmd(ctrl, "LINK_REMOVE", 1, argc, argv);
 }
 
+static int hostapd_cli_cmd_set_attlm(struct wpa_ctrl *ctrl, int argc,
+				     char *argv[])
+{
+	return hostapd_cli_cmd(ctrl, "SET_ATTLM", 1, argc, argv);
+}
+
 struct hostapd_cli_cmd {
 	const char *cmd;
 	int (*handler)(struct wpa_ctrl *ctrl, int argc, char *argv[]);
@@ -2055,6 +2061,8 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 		" = Add a new link to a MLD AP"},
 	{ "link_remove", hostapd_cli_cmd_link_remove, NULL,
 		" [count=<count>] = Remove affiliated link of a MLD AP"},
+	{ "set_attlm", hostapd_cli_cmd_set_attlm, NULL,
+		" = Disable the affiliated AP of a MLD AP" },
 	{ NULL, NULL, NULL, NULL }
 };
 
diff --git a/src/ap/ap_drv_ops.c b/src/ap/ap_drv_ops.c
index 8b6aed0c7..a25a67cdd 100644
--- a/src/ap/ap_drv_ops.c
+++ b/src/ap/ap_drv_ops.c
@@ -619,6 +619,15 @@ int hostapd_if_link_remove(struct hostapd_data *hapd,
 	return hapd->driver->link_remove(hapd->drv_priv, type, ifname,
 					 hapd->mld_link_id);
 }
+
+
+int hostapd_drv_set_attlm(struct hostapd_data *hapd)
+{
+	if (!hapd->driver || !hapd->drv_priv || !hapd->driver->set_attlm)
+		return -1;
+
+	return hapd->driver->set_attlm(hapd->drv_priv, &hapd->mld->new_attlm);
+}
 #endif /* CONFIG_IEEE80211BE */
 
 
diff --git a/src/ap/ap_drv_ops.h b/src/ap/ap_drv_ops.h
index e74284b96..7f108bc1d 100644
--- a/src/ap/ap_drv_ops.h
+++ b/src/ap/ap_drv_ops.h
@@ -68,6 +68,7 @@ int hostapd_if_remove(struct hostapd_data *hapd, enum wpa_driver_if_type type,
 int hostapd_if_link_remove(struct hostapd_data *hapd,
 			   enum wpa_driver_if_type type,
 			   const char *ifname, u8 link_id);
+int hostapd_drv_set_attlm(struct hostapd_data *hapd);
 int hostapd_set_ieee8021x(struct hostapd_data *hapd,
 			  struct wpa_bss_params *params);
 int hostapd_get_seqnum(const char *ifname, struct hostapd_data *hapd,
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index e34bc1fa8..9388f6070 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -537,6 +537,14 @@ void hostapd_link_remove_cb(struct hostapd_data *hapd, u16 removed_links)
 	}
 }
 
+
+int hostapd_mld_set_attlm(struct hostapd_data *hapd)
+{
+	if (!hapd->drv_priv)
+		return -1;
+
+	return hostapd_drv_set_attlm(hapd);
+}
 #endif /* CONFIG_TESTING_OPTIONS */
 #endif /* CONFIG_IEEE80211BE */
 
diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index 2bf24bc69..f69fa0062 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -925,6 +925,7 @@ struct hostapd_data * hostapd_mld_get_link_bss(struct hostapd_data *hapd,
 					       u8 link_id);
 int hostapd_link_remove(struct hostapd_data *hapd, u32 count);
 void hostapd_link_remove_cb(struct hostapd_data *hapd, u16 removed_links);
+int hostapd_mld_set_attlm(struct hostapd_data *hapd);
 bool hostapd_is_ml_partner(struct hostapd_data *hapd1,
 			   struct hostapd_data *hapd2);
 u8 hostapd_get_mld_id(struct hostapd_data *hapd);
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 3e9fb8ce1..886a21a66 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -6344,6 +6344,13 @@ int ieee802_11_mgmt(struct hostapd_data *hapd, const u8 *buf, size_t len,
 		wpa_printf(MSG_DEBUG, "MGMT: Drop the frame - MLD not ready");
 		return 1;
 	}
+
+	if (hapd->conf->mld_ap && hapd->mld->new_attlm.valid &&
+	    !hapd->mld->new_attlm.switch_time_tsf_tu &&
+	    (hapd->mld->new_attlm.disabled_links & BIT(hapd->mld_link_id))) {
+		wpa_printf(MSG_DEBUG, "MGMT: Drop the frame - Disabled link");
+		return 1;
+	}
 #endif /* CONFIG_IEEE80211BE */
 
 	if (fi && fi->freq)
diff --git a/src/ap/ieee802_11_eht.c b/src/ap/ieee802_11_eht.c
index 261225bae..2ed9414b8 100644
--- a/src/ap/ieee802_11_eht.c
+++ b/src/ap/ieee802_11_eht.c
@@ -595,7 +595,7 @@ static u8 * hostapd_eid_eht_basic_ml_common(struct hostapd_data *hapd,
 	mld_cap |= active_links & EHT_ML_MLD_CAPA_MAX_NUM_SIM_LINKS_MASK;
 
 	/* TODO: Advertise T2LM based on driver support as well */
-	mld_cap &= ~EHT_ML_MLD_CAPA_TID_TO_LINK_MAP_NEG_SUPP_MSK;
+	mld_cap |= EHT_ML_MLD_CAPA_TID_TO_LINK_MAP_ALL_TO_ALL;
 
 	wpa_printf(MSG_DEBUG, "MLD: MLD Capabilities and Operations=0x%x",
 		   mld_cap);
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index 5ce4ca467..fe327e560 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -5262,6 +5262,14 @@ struct wpa_driver_ops {
 	int (*link_remove)(void *priv, enum wpa_driver_if_type type,
 			   const char *ifname, u8 link_id);
 
+	/**
+	 * set_attlm - Set AP MLD advertised Tid-to-Link Mapping
+	 * @priv: Private driver interface data
+	 * @attlm: setting of Tid-to-Link Mapping
+	 * Returns: 0 on success, negative value on failure
+	 */
+	int (*set_attlm)(void *priv, struct attlm_settings *attlm);
+
 	/**
 	 * is_drv_shared - Check whether the driver interface is shared
 	 * @priv: Private driver interface data from init()
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 1d334b75f..05b231c52 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -11020,6 +11020,38 @@ static bool nl80211_is_drv_shared(void *priv, void *bss_ctx)
 	return true;
 }
 
+
+static int nl80211_set_attlm(void *priv, struct attlm_settings *attlm)
+{
+	struct nl_msg *msg;
+	struct i802_bss *bss = priv;
+	struct wpa_driver_nl80211_data *drv = bss->drv;
+	int ret = -ENOBUFS;
+
+	wpa_printf(MSG_DEBUG, "nl80211: Set A-TTLM");
+
+	if (!(msg = nl80211_bss_msg(bss, 0, NL80211_CMD_SET_ATTLM)) ||
+	    nla_put_u16(msg, NL80211_ATTR_MLO_LINK_DISABLED_BMP,
+			attlm->disabled_links) ||
+	    nla_put_u16(msg, NL80211_ATTR_MLO_ATTLM_SWITCH_TIME,
+			attlm->switch_time) ||
+	    nla_put_u32(msg, NL80211_ATTR_MLO_ATTLM_DURATION,
+			attlm->duration))
+		goto error;
+
+	ret = send_and_recv_cmd(drv, msg);
+	if (ret) {
+		wpa_printf(MSG_DEBUG,
+			   "nl80211: disable link failed err=%d (%s)",
+			   ret, strerror(-ret));
+	}
+
+	return ret;
+error:
+	nlmsg_free(msg);
+	wpa_printf(MSG_DEBUG, "nl80211: Could not build link disabling request");
+	return ret;
+}
 #endif /* CONFIG_IEEE80211BE */
 
 
@@ -15717,6 +15749,7 @@ const struct wpa_driver_ops wpa_driver_nl80211_ops = {
 	.link_add = nl80211_link_add,
 #ifdef CONFIG_IEEE80211BE
 	.link_remove = driver_nl80211_link_remove,
+	.set_attlm = nl80211_set_attlm,
 	.is_drv_shared = nl80211_is_drv_shared,
 	.link_sta_remove = wpa_driver_nl80211_link_sta_remove,
 #endif /* CONFIG_IEEE80211BE */
diff --git a/src/drivers/driver_nl80211_event.c b/src/drivers/driver_nl80211_event.c
index 85bda6785..863c4eb65 100644
--- a/src/drivers/driver_nl80211_event.c
+++ b/src/drivers/driver_nl80211_event.c
@@ -189,6 +189,7 @@ static const char * nl80211_command_to_string(enum nl80211_commands cmd)
 	C2S(NL80211_CMD_LINKS_REMOVED)
 	C2S(NL80211_CMD_SET_TID_TO_LINK_MAPPING)
 	C2S(NL80211_CMD_ATTLM_EVENT)
+	C2S(NL80211_CMD_SET_ATTLM)
 	C2S(__NL80211_CMD_AFTER_LAST)
 	}
 #undef C2S
diff --git a/src/drivers/nl80211_copy.h b/src/drivers/nl80211_copy.h
index 988f6a788..f997edd6e 100644
--- a/src/drivers/nl80211_copy.h
+++ b/src/drivers/nl80211_copy.h
@@ -1590,6 +1590,7 @@ enum nl80211_commands {
 
 	/* MTK internal */
 	NL80211_CMD_ATTLM_EVENT,
+	NL80211_CMD_SET_ATTLM,
 
 	/* used to define NL80211_CMD_MAX below */
 	__NL80211_CMD_AFTER_LAST,
@@ -3391,6 +3392,7 @@ enum nl80211_attrs {
 
 	NL80211_ATTR_MLO_LINKS,
 	NL80211_ATTR_MLO_LINK_ID,
+	NL80211_ATTR_MLO_LINK_DISABLED_BMP,
 	NL80211_ATTR_MLD_ADDR,
 
 	NL80211_ATTR_MLO_SUPPORT,
-- 
2.18.0


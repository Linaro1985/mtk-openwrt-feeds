From 4a82016226c9437fddbfb6dde6564eed841e7f39 Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Fri, 2 Aug 2024 17:08:08 +0800
Subject: [PATCH 95/97] mtk: mac80211: move adv_ttlm_info to ieee80211_vif

Move adv_ttlm_info to ieee80211_vif so that driver can use it in
vif_cfg_changed callback.

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 include/net/mac80211.h     | 19 +++++++++++++++++++
 net/mac80211/ieee80211_i.h | 12 ------------
 net/mac80211/mlme.c        | 26 +++++++++++++-------------
 3 files changed, 32 insertions(+), 25 deletions(-)

diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 1345676..f22e50b 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1929,6 +1929,22 @@ struct ieee80211_vif_cfg {
 
 #define IEEE80211_TTLM_NUM_TIDS 8
 
+/**
+ * struct ieee8021_adv_ttlm - advertised TID to link map info
+ *
+ * @switch_time: time in TUs at which the new mapping is established, or 0 if
+ *      there is no planned advertised TID-to-link mapping.
+ * @duration: duration of the planned TID-to-link mapping in TUs.
+ * @map: bitmap of usable links for all TIDs.
+ * @active: whether the advertised mapping is active or not.
+ */
+struct ieee80211_adv_ttlm {
+	u16 switch_time;
+	u32 duration;
+	u16 map;
+	bool active;
+};
+
 /**
  * struct ieee80211_neg_ttlm - negotiated TID to link map info
  *
@@ -1979,6 +1995,8 @@ enum ieee80211_neg_ttlm_res {
  *	suspended due to negotiated TTLM, and could be activated in the
  *	future by tearing down the TTLM negotiation.
  *	0 for non-MLO.
+ * @adv_ttlm: advertised TID to link mapping info.
+ *	see &struct ieee80211_adv_ttlm.
  * @neg_ttlm: negotiated TID to link mapping info.
  *	see &struct ieee80211_neg_ttlm.
  * @addr: address of this interface
@@ -2019,6 +2037,7 @@ struct ieee80211_vif {
 	struct ieee80211_bss_conf bss_conf;
 	struct ieee80211_bss_conf __rcu *link_conf[IEEE80211_MLD_MAX_NUM_LINKS];
 	u16 valid_links, active_links, dormant_links, suspended_links;
+	struct ieee80211_adv_ttlm adv_ttlm;
 	struct ieee80211_neg_ttlm neg_ttlm;
 	u8 addr[ETH_ALEN] __aligned(2);
 	bool p2p;
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index a77e63c..9027209 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -496,17 +496,6 @@ struct ieee80211_sta_tx_tspec {
 	bool downgraded;
 };
 
-/* Advertised TID-to-link mapping info */
-struct ieee80211_adv_ttlm_info {
-	/* time in TUs at which the new mapping is established, or 0 if there is
-	 * no planned advertised TID-to-link mapping
-	 */
-	u16 switch_time;
-	u32 duration; /* duration of the planned T2L map in TUs */
-	u16 map; /* map of usable links for all TIDs */
-	bool active; /* whether the advertised mapping is active or not */
-};
-
 DECLARE_EWMA(beacon_signal, 4, 4)
 
 struct ieee80211_if_managed {
@@ -606,7 +595,6 @@ struct ieee80211_if_managed {
 
 	/* TID-to-link mapping support */
 	struct wiphy_delayed_work ttlm_work;
-	struct ieee80211_adv_ttlm_info ttlm_info;
 	struct wiphy_work teardown_ttlm_work;
 
 	/* dialog token enumerator for neg TTLM request */
diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index 6cbcfe4..899cc23 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -3712,8 +3712,8 @@ static void ieee80211_set_disassoc(struct ieee80211_sub_if_data *sdata,
 	sdata->vif.cfg.eml_med_sync_delay = 0;
 	sdata->vif.cfg.mld_capa_op = 0;
 
-	memset(&sdata->u.mgd.ttlm_info, 0,
-	       sizeof(sdata->u.mgd.ttlm_info));
+	memset(&sdata->vif.adv_ttlm, 0,
+	       sizeof(sdata->vif.adv_ttlm));
 	wiphy_delayed_work_cancel(sdata->local->hw.wiphy, &ifmgd->ttlm_work);
 
 	memset(&sdata->vif.neg_ttlm, 0, sizeof(sdata->vif.neg_ttlm));
@@ -6431,9 +6431,9 @@ static void ieee80211_tid_to_link_map_work(struct wiphy *wiphy,
 		container_of(work, struct ieee80211_sub_if_data,
 			     u.mgd.ttlm_work.work);
 
-	new_active_links = sdata->u.mgd.ttlm_info.map &
+	new_active_links = sdata->vif.adv_ttlm.map &
 			   sdata->vif.valid_links;
-	new_dormant_links = ~sdata->u.mgd.ttlm_info.map &
+	new_dormant_links = ~sdata->vif.adv_ttlm.map &
 			    sdata->vif.valid_links;
 
 	ieee80211_vif_set_links(sdata, sdata->vif.valid_links, 0);
@@ -6441,8 +6441,8 @@ static void ieee80211_tid_to_link_map_work(struct wiphy *wiphy,
 				     0))
 		return;
 
-	sdata->u.mgd.ttlm_info.active = true;
-	sdata->u.mgd.ttlm_info.switch_time = 0;
+	sdata->vif.adv_ttlm.active = true;
+	sdata->vif.adv_ttlm.switch_time = 0;
 }
 
 static u16 ieee80211_get_ttlm(u8 bm_size, u8 *data)
@@ -6456,7 +6456,7 @@ static u16 ieee80211_get_ttlm(u8 bm_size, u8 *data)
 static int
 ieee80211_parse_adv_t2l(struct ieee80211_sub_if_data *sdata,
 			const struct ieee80211_ttlm_elem *ttlm,
-			struct ieee80211_adv_ttlm_info *ttlm_info)
+			struct ieee80211_adv_ttlm *ttlm_info)
 {
 	/* The element size was already validated in
 	 * ieee80211_tid_to_link_map_size_ok()
@@ -6545,13 +6545,13 @@ static void ieee80211_process_adv_ttlm(struct ieee80211_sub_if_data *sdata,
 		return;
 
 	if (!elems->ttlm_num) {
-		if (sdata->u.mgd.ttlm_info.switch_time) {
+		if (sdata->vif.adv_ttlm.switch_time) {
 			/* if a planned TID-to-link mapping was cancelled -
 			 * abort it
 			 */
 			wiphy_delayed_work_cancel(sdata->local->hw.wiphy,
 						  &sdata->u.mgd.ttlm_work);
-		} else if (sdata->u.mgd.ttlm_info.active) {
+		} else if (sdata->vif.adv_ttlm.active) {
 			/* if no TID-to-link element, set to default mapping in
 			 * which all TIDs are mapped to all setup links
 			 */
@@ -6565,13 +6565,13 @@ static void ieee80211_process_adv_ttlm(struct ieee80211_sub_if_data *sdata,
 			ieee80211_vif_cfg_change_notify(sdata,
 							BSS_CHANGED_MLD_VALID_LINKS);
 		}
-		memset(&sdata->u.mgd.ttlm_info, 0,
-		       sizeof(sdata->u.mgd.ttlm_info));
+		memset(&sdata->vif.adv_ttlm, 0,
+		       sizeof(sdata->vif.adv_ttlm));
 		return;
 	}
 
 	for (i = 0; i < elems->ttlm_num; i++) {
-		struct ieee80211_adv_ttlm_info ttlm_info;
+		struct ieee80211_adv_ttlm ttlm_info;
 		u32 res;
 
 		res = ieee80211_parse_adv_t2l(sdata, elems->ttlm[i],
@@ -6617,7 +6617,7 @@ static void ieee80211_process_adv_ttlm(struct ieee80211_sub_if_data *sdata,
 			else
 				delay_jiffies = 0;
 
-			sdata->u.mgd.ttlm_info = ttlm_info;
+			sdata->vif.adv_ttlm = ttlm_info;
 			wiphy_delayed_work_cancel(sdata->local->hw.wiphy,
 						  &sdata->u.mgd.ttlm_work);
 			wiphy_delayed_work_queue(sdata->local->hw.wiphy,
-- 
2.18.0


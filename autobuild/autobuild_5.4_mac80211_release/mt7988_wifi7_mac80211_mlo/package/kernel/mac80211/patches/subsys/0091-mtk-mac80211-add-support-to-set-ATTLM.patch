From 55cbda6f8fd4165a862ab84f703179873148b64e Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Wed, 3 Jul 2024 17:04:52 +0800
Subject: [PATCH 91/97] mtk: mac80211: add support to set ATTLM

MAC80211 just forwards the setting requrest to driver

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 include/net/cfg80211.h       |  2 ++
 include/net/mac80211.h       |  2 ++
 include/uapi/linux/nl80211.h |  2 ++
 net/mac80211/cfg.c           | 15 +++++++++++++++
 net/wireless/nl80211.c       | 31 +++++++++++++++++++++++++++++++
 net/wireless/rdev-ops.h      | 18 ++++++++++++++++++
 net/wireless/trace.h         | 24 ++++++++++++++++++++++++
 7 files changed, 94 insertions(+)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 3d54c76..bc3e585 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -5035,6 +5035,8 @@ struct cfg80211_ops {
 				    struct link_station_del_parameters *params);
 	int	(*set_hw_timestamp)(struct wiphy *wiphy, struct net_device *dev,
 				    struct cfg80211_set_hw_timestamp *hwts);
+	int	(*set_attlm)(struct wiphy *wiphy, struct net_device *dev,
+			     u16 disabled_links, u16 switch_time, u32 duration);
 	int	(*set_ttlm)(struct wiphy *wiphy, struct net_device *dev,
 			    struct cfg80211_ttlm_params *params);
 	u32	(*get_radio_mask)(struct wiphy *wiphy, struct net_device *dev);
diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 3a3660d..1345676 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -4852,6 +4852,8 @@ struct ieee80211_ops {
 			    struct net_device *dev,
 			    enum tc_setup_type type,
 			    void *type_data);
+	int (*set_attlm)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+			 u16 disabled_links, u16 switch_time, u32 druation);
 	enum ieee80211_neg_ttlm_res
 	(*can_neg_ttlm)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			struct ieee80211_neg_ttlm *ttlm);
diff --git a/include/uapi/linux/nl80211.h b/include/uapi/linux/nl80211.h
index f1da073..7188839 100644
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -1590,6 +1590,7 @@ enum nl80211_commands {
 
 	/* MTK internal */
 	NL80211_CMD_ATTLM_EVENT,
+	NL80211_CMD_SET_ATTLM,
 
 	/* used to define NL80211_CMD_MAX below */
 	__NL80211_CMD_AFTER_LAST,
@@ -3391,6 +3392,7 @@ enum nl80211_attrs {
 
 	NL80211_ATTR_MLO_LINKS,
 	NL80211_ATTR_MLO_LINK_ID,
+	NL80211_ATTR_MLO_LINK_DISABLED_BMP,
 	NL80211_ATTR_MLD_ADDR,
 
 	NL80211_ATTR_MLO_SUPPORT,
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 6acf014..1784b8b 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -5222,6 +5222,20 @@ static int ieee80211_set_hw_timestamp(struct wiphy *wiphy,
 	return local->ops->set_hw_timestamp(&local->hw, &sdata->vif, hwts);
 }
 
+static int
+ieee80211_set_attlm(struct wiphy *wiphy, struct net_device *dev,
+		    u16 disabled_links, u16 switch_time, u32 duration)
+{
+	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
+	struct ieee80211_local *local = sdata->local;
+
+	if (!local->ops->set_attlm)
+		return -EOPNOTSUPP;
+
+	return local->ops->set_attlm(&local->hw, &sdata->vif, disabled_links,
+				     switch_time, duration);
+}
+
 static int
 ieee80211_set_ttlm(struct wiphy *wiphy, struct net_device *dev,
 		   struct cfg80211_ttlm_params *params)
@@ -5391,6 +5405,7 @@ const struct cfg80211_ops mac80211_config_ops = {
 	.mod_link_station = ieee80211_mod_link_station,
 	.del_link_station = ieee80211_del_link_station,
 	.set_hw_timestamp = ieee80211_set_hw_timestamp,
+	.set_attlm = ieee80211_set_attlm,
 	.set_ttlm = ieee80211_set_ttlm,
 	.get_radio_mask = ieee80211_get_radio_mask,
 	.skip_cac = ieee80211_skip_cac,
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 940580c..5439aa0 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -843,6 +843,7 @@ static const struct nla_policy nl80211_policy[NUM_NL80211_ATTR] = {
 		NLA_POLICY_NESTED_ARRAY(nl80211_policy),
 	[NL80211_ATTR_MLO_LINK_ID] =
 		NLA_POLICY_RANGE(NLA_U8, 0, IEEE80211_MLD_MAX_NUM_LINKS),
+	[NL80211_ATTR_MLO_LINK_DISABLED_BMP] = { .type = NLA_U16 },
 	[NL80211_ATTR_MLD_ADDR] = NLA_POLICY_EXACT_LEN(ETH_ALEN),
 	[NL80211_ATTR_MLO_SUPPORT] = { .type = NLA_FLAG },
 	[NL80211_ATTR_MAX_NUM_AKM_SUITES] = { .type = NLA_REJECT },
@@ -16692,6 +16693,30 @@ static int nl80211_set_hw_timestamp(struct sk_buff *skb,
 	return rdev_set_hw_timestamp(rdev, dev, &hwts);
 }
 
+static int
+nl80211_set_attlm(struct sk_buff *skb, struct genl_info *info)
+{
+	struct cfg80211_registered_device *rdev = info->user_ptr[0];
+	struct net_device *dev = info->user_ptr[1];
+	struct wireless_dev *wdev = dev->ieee80211_ptr;
+	u16 switch_time, disabled_links;
+	u32 duration;
+
+	if (wdev->iftype != NL80211_IFTYPE_AP)
+		return -EOPNOTSUPP;
+
+	if (!info->attrs[NL80211_ATTR_MLO_LINK_DISABLED_BMP] ||
+	    !info->attrs[NL80211_ATTR_MLO_ATTLM_SWITCH_TIME] ||
+	    !info->attrs[NL80211_ATTR_MLO_ATTLM_DURATION])
+		return -EINVAL;
+
+	disabled_links = nla_get_u16(info->attrs[NL80211_ATTR_MLO_LINK_DISABLED_BMP]);
+	switch_time = nla_get_u16(info->attrs[NL80211_ATTR_MLO_ATTLM_SWITCH_TIME]);
+	duration = nla_get_u32(info->attrs[NL80211_ATTR_MLO_ATTLM_DURATION]);
+
+	return rdev_set_attlm(rdev, dev, disabled_links, switch_time, duration);
+}
+
 static int
 nl80211_set_ttlm(struct sk_buff *skb, struct genl_info *info)
 {
@@ -17919,6 +17944,12 @@ static const struct genl_small_ops nl80211_small_ops[] = {
 		.flags = GENL_UNS_ADMIN_PERM,
 		.internal_flags = IFLAGS(NL80211_FLAG_NEED_NETDEV_UP),
 	},
+	{
+		.cmd = NL80211_CMD_SET_ATTLM,
+		.doit = nl80211_set_attlm,
+		.flags = GENL_UNS_ADMIN_PERM,
+		.internal_flags = IFLAGS(NL80211_FLAG_NEED_NETDEV_UP),
+	},
 	{
 		.cmd = NL80211_CMD_SET_TID_TO_LINK_MAPPING,
 		.doit = nl80211_set_ttlm,
diff --git a/net/wireless/rdev-ops.h b/net/wireless/rdev-ops.h
index bcd51fc..4056f70 100644
--- a/net/wireless/rdev-ops.h
+++ b/net/wireless/rdev-ops.h
@@ -1538,6 +1538,24 @@ rdev_set_hw_timestamp(struct cfg80211_registered_device *rdev,
 	return ret;
 }
 
+static inline int
+rdev_set_attlm(struct cfg80211_registered_device *rdev, struct net_device *dev,
+	       u16 disabled_links, u16 switch_time, u32 duration)
+{
+	struct wiphy *wiphy = &rdev->wiphy;
+	int ret;
+
+	if (!rdev->ops->set_attlm)
+		return -EOPNOTSUPP;
+
+	trace_rdev_set_attlm(wiphy, dev, disabled_links, switch_time, duration);
+	ret = rdev->ops->set_attlm(wiphy, dev, disabled_links, switch_time,
+				   duration);
+	trace_rdev_return_int(wiphy, ret);
+
+	return ret;
+}
+
 static inline int
 rdev_set_ttlm(struct cfg80211_registered_device *rdev,
 	      struct net_device *dev,
diff --git a/net/wireless/trace.h b/net/wireless/trace.h
index 29af83e..9de35cc 100644
--- a/net/wireless/trace.h
+++ b/net/wireless/trace.h
@@ -3048,6 +3048,30 @@ TRACE_EVENT(rdev_set_hw_timestamp,
 		  __entry->enable)
 );
 
+TRACE_EVENT(rdev_set_attlm,
+	TP_PROTO(struct wiphy *wiphy, struct net_device *netdev,
+		 u16 disabled_links, u16 switch_time, u32 duration),
+	TP_ARGS(wiphy, netdev, disabled_links, switch_time, duration),
+	TP_STRUCT__entry(
+		WIPHY_ENTRY
+		NETDEV_ENTRY
+		__field(u16, disabled_links)
+		__field(u16, switch_time)
+		__field(u32, duration)
+	),
+	TP_fast_assign(
+		WIPHY_ASSIGN;
+		NETDEV_ASSIGN;
+		__entry->disabled_links = disabled_links;
+		__entry->switch_time = switch_time;
+		__entry->duration = duration;
+	),
+	TP_printk(WIPHY_PR_FMT ", " NETDEV_PR_FMT ", disabled_link: %u"
+		  ", switch_time=%u, duration=%u",
+		  WIPHY_PR_ARG, NETDEV_PR_ARG, __entry->disabled_links,
+		  __entry->switch_time, __entry->duration)
+);
+
 TRACE_EVENT(rdev_set_ttlm,
 	TP_PROTO(struct wiphy *wiphy, struct net_device *netdev,
 		 struct cfg80211_ttlm_params *params),
-- 
2.18.0

